import asyncio

from pyrogram import Client, filters
from pyrogram.errors.exceptions.bad_request_400 import UsernameInvalid
from pyrogram.types import Message
from pyrogram.enums import ParseMode

# from config import RECEIVER_1, RECEIVER_2


app = Client("basic", api_id=20443042,
             api_hash="149625d78505443528abdd6fe02519a9")

RECEIVER_1 = None  # chat id
RECEIVER_2 = None  # chat id

app.start()

if input("–°–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–∏–µ–º–Ω–∏–∫–∏? (–¥–∞/–Ω–µ—Ç): ") == "–¥–∞":
    link_1 = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–µ–º–Ω–∏–∫–∞ 1.\n"
                   "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ Enter: ")
    while True:
        if link_1:
            try:
                RECEIVER_1 = app.get_chat(link_1.split('/')[-1]).id
                print("–£—Å–ø–µ—Ö!\n")
                break

            except UsernameInvalid:
                link_1 = input("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞! –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–µ–º–Ω–∏–∫–∞ 1.\n"
                               "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ Enter: ")

        else:
            break

    link_2 = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–µ–º–Ω–∏–∫–∞ 2.\n"
                   "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ Enter: ")

    while True:
        if link_2:
            try:
                RECEIVER_2 = app.get_chat(link_2.split('/')[-1]).id
                print("–£—Å–ø–µ—Ö!\n")
                break

            except UsernameInvalid:
                link_2 = input("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞! –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–µ–º–Ω–∏–∫–∞ 2.\n"
                               "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ Enter: ")

        else:
            break

app.stop()


@app.on_message(filters.channel)
async def log(client, message: Message):
    # where the message came from
    source = f"{message.link[:message.link.rfind('/')]}"

    # for example, the second picture in the message
    # corresponds to this condition
    if not message.text and not message.caption:
        pass

    else:
        # we need to find out does the message contain
        # attachments or is it just text
        if message.text:
            message_text = message.text + \
                f"\n\n<a href='{source}'>–ò–°–¢–û–ß–ù–ò–ö</a>"

        elif message.caption:
            message_text = message.caption + \
                f"\n\n<a href='{source}'>–ò–°–¢–û–ß–ù–ò–ö</a>"

        # send message to the receiver 1
        await app.send_message(RECEIVER_1,
                               message_text,
                               parse_mode=ParseMode.HTML)

        # send messages to receiver 2
        if message.text:
            message_text = '\n'.join(message.text.strip().split("\n")[:2]) + \
                f"...\n\n<a href='{source}'>–ò–°–¢–û–ß–ù–ò–ö</a> üëâ " + \
                f"<a href='{message.link}'>–ü–û–î–†–û–ë–ù–û–°–¢–ò</a>"

        elif message.caption:
            message_text = '\n'.join(message.caption.strip().split("\n")[:2]) + \
                f"...\n\n<a href='{source}'>–ò–°–¢–û–ß–ù–ò–ö</a> üëâ " + \
                f"<a href='{message.link}'>–ü–û–î–†–û–ë–ù–û–°–¢–ò</a>"

        await app.send_message(RECEIVER_2,
                               message_text)


print("\n–£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã!")
app.run()
